import 'package:app_attest_integrity/app_attest_integrity_platform_interface.dart';
import 'package:app_attest_integrity/src/model/generate_attestation_response.dart';

/// This class is used to assess an app integrity.
/// Uses App attest on iOS and app Integrity on Android.
class AppAttestIntegrity {
  /// This class is used to assess an app integrity.
  /// Uses App attest on iOS and app Integrity on Android.
  const AppAttestIntegrity();

  /// [Android only]<br/>
  /// Warm up the integrity API server.
  ///
  /// Use this method on Android when you plan to use the `verify` method
  /// in a near future.
  /// See [this android official doc](https://developer.android.com/google/play/integrity/standard) for more details.
  ///
  /// Throws if the warmup fails, or if the method had already been called.
  ///
  /// [cloudProjectNumber] is the cloud project number of your app.
  /// It can be found in the Google Play Console.
  ///
  /// This method will do nothing on iOS.
  Future<void> androidPrepareIntegrityServer(int cloudProjectNumber) {
    return AppAttestIntegrityPlatform.instance.androidPrepareIntegrityServer(
      cloudProjectNumber,
    );
  }

  /// [iOS only]<br/>
  /// Creates a key pair and verifies it using the [challenge],
  /// which creates an attestation.
  /// Returns the corresponding attestation and keyID to be sent to the server.
  ///
  /// The attestation can be seen as a public key for later integrity checks.
  /// See [this iOS official doc](https://developer.apple.com/documentation/devicecheck/establishing-your-app-s-integrity) for more details
  /// and further implementation instructions.
  ///
  ///
  /// [challenge] is a nonce generated by the server,
  /// used to avoid replay attacks.<br/>
  /// The challenge should be at least 16 bytes in length to ensure sufficient
  /// entropy to ensure guessing them is infeasible.
  ///
  /// This method will throw if used on an unsupported iOS device.
  ///
  /// Returns null only when used on Android.
  Future<GenerateAttestationResponse?> iOSgenerateAttestation(
    String challenge,
  ) {
    return AppAttestIntegrityPlatform.instance.iOSgenerateAttestation(
      challenge,
    );
  }

  /// Use this method to sign your data in a way that can prove the integrity
  /// of the app on the server side.
  ///
  /// On android, [androidPrepareIntegrityServer] should be called
  /// on a non critical path before using this method,
  /// otherwise the Future might take several seconds to complete. See the [doc](https://developer.android.com/google/play/integrity/standard)
  ///
  /// On iOS, [iOSgenerateAttestation] should be have been called once
  /// for the user before using this method, o therwise the method will fail. See the [doc](https://developer.apple.com/documentation/devicecheck/establishing-your-app-s-integrity)
  ///
  /// [clientData] is the client data to secure, in the form of a JSON string.
  /// It should contain a nonce or a challenge to avoid replay attacks.
  ///
  /// [keyID] is used on iOS only to retrieve the private key stored by the OS.
  ///
  /// [cloudProjectNumber] is used on android only to set
  /// the cloud project number.
  /// It can be found in the Google Play Console.
  /// If not provided, the method will use the cloud project number set by
  /// [androidPrepareIntegrityServer]. If [androidPrepareIntegrityServer]
  /// was not called, the method will throw an error.
  ///
  /// Returns the signature of the client data, to be sent to the server along
  /// with the client data.
  ///
  /// This method will throw if used on an unsupported device.
  ///
  /// See [this iOS official doc](https://developer.apple.com/documentation/devicecheck/establishing-your-app-s-integrity)
  /// and [this Android official doc](https://developer.android.com/google/play/integrity/standard)
  /// for more details and implementation instructions.
  Future<String> verify({
    required String clientData,
    required String keyID,
    int? cloudProjectNumber,
  }) {
    return AppAttestIntegrityPlatform.instance.verify(
      clientData: clientData,
      keyID: keyID,
      cloudProjectNumber: cloudProjectNumber,
    );
  }
}
