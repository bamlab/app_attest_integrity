import 'package:app_attest_integrity/app_attest_integrity_method_channel.dart';
import 'package:app_attest_integrity/src/model/generate_attestation_response.dart';
import 'package:plugin_platform_interface/plugin_platform_interface.dart';

/// Platform interface for the AppAttestIntegrity plugin.
/// Extend this class to implement the platform-specific logic
/// for a new platform.
abstract class AppAttestIntegrityPlatform extends PlatformInterface {
  /// Platform interface for the AppAttestIntegrity plugin.
  /// Extend this class to implement the platform-specific logic
  /// for a new platform.
  AppAttestIntegrityPlatform() : super(token: _token);

  // ignore: no-object-declaration, standard for platform interface
  static final Object _token = Object();

  static AppAttestIntegrityPlatform _instance =
      MethodChannelAppAttestIntegrity();

  /// The default instance of [AppAttestIntegrityPlatform] to use.
  ///
  /// Defaults to [MethodChannelAppAttestIntegrity].
  static AppAttestIntegrityPlatform get instance => _instance;

  /// Platform-specific implementations should set this with their own
  /// platform-specific class that extends [AppAttestIntegrityPlatform] when
  /// they register themselves.
  static set instance(AppAttestIntegrityPlatform value) {
    PlatformInterface.verifyToken(value, _token);
    _instance = value;
  }

  /// [Android only]<br/>
  /// Warm up the integrity API server.
  ///
  /// Use this method on Android when you plan to use the `verify` method
  /// in a near future.
  /// See [this android official doc](https://developer.android.com/google/play/integrity/standard) for more details.
  ///
  /// Throws if the warmup fails, or if the method had already been called.
  ///
  /// [cloudProjectNumber] is the cloud project number of your app.
  /// It can be found in the Google Play Console.
  ///
  /// This method will do nothing on iOS.
  Future<void> androidPrepareIntegrityServer(int cloudProjectNumber) {
    throw UnimplementedError(
      'androidPrepareIntegrityServer() has not been implemented.',
    );
  }

  /// [iOS only]<br/>
  /// Creates a key pair and returns the corresponding attestation and keyID
  /// to be sent to the server.
  /// Then, the attestation is verified using the [challenge].
  ///
  /// The attestation can be seen as a public key for later integrity checks.
  /// See [this iOS official doc](https://developer.apple.com/documentation/devicecheck/establishing-your-app-s-integrity) for more details
  /// and further implementation instructions.
  ///
  ///
  /// [challenge] is a nonce generated by the server,
  /// used to avoid replay attacks.<br/>
  /// The challenge should be at least 16 bytes in length to ensure sufficient
  /// entropy to ensure guessing them is infeasible.
  ///
  /// Returns null only onAndroid.
  Future<GenerateAttestationResponse?> iOSgenerateAttestation(
    String challenge,
  ) {
    throw UnimplementedError(
      'iOSgenerateAttestation() has not been implemented.',
    );
  }

  /// Use this method to sign your data in a way that can prove the integrity
  /// of the app on the server side.
  ///
  /// On android, [androidPrepareIntegrityServer] should be called
  /// on a non critical path before using this method,
  /// otherwise the Future might take several seconds to complete. See the [doc](https://developer.android.com/google/play/integrity/standard)
  ///
  /// On iOS, [iOSgenerateAttestation] should be have been called once
  /// for the user before using this method, otherwise the method will fail.
  ///
  /// [clientData] is the client data to secure, in the form of a JSON string.
  /// It should contain a nonce or a challenge to avoid replay attacks.
  ///
  /// [keyID] is used on iOS only to retrieve the private key stored by the OS.
  ///
  /// Returns the signature of the client data, to be sent to the server along
  /// with the client data.
  ///
  /// See [this iOS official doc](https://developer.apple.com/documentation/devicecheck/establishing-your-app-s-integrity)
  /// and [this Android official doc](https://developer.android.com/google/play/integrity/standard)
  /// for more details and implementation instructions.
  Future<String> verify({
    required String clientData,
    required String keyID,
    int? cloudProjectNumber,
  }) {
    throw UnimplementedError(
      'iOSgenerateAttestation() has not been implemented.',
    );
  }
}
